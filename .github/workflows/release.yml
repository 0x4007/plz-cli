on:
  push:
    tags:
      - 'v*' # This will trigger the workflow when a tag starting with 'v' is pushed

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

name: Create Release and Upload Assets

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  version_bump:
    name: Bump cache version
    runs-on: ubuntu-latest
    needs: [create_release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Version
        run: .github/.deploy/bump.sh

      - uses: actions/upload-artifact@v4
        with:
          name: pkg-version
          path: Cargo.toml

  windows:
    name: Build for Windows
    runs-on: windows-latest
    needs: [version_bump]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: pkg-version

      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release

      - name: "Move to outputs/ folder"
        run: |
          mkdir outputs
          cp target/release/*.exe outputs/plz-win-x86_64.exe

      - name: Upload to temporary storage
        uses: actions/upload-artifact@v4
        with:
          name: output-artifact
          path: outputs

  linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    needs: [version_bump]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: pkg-version

      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release

      - name: Install cargo-deb
        run: cargo install cargo-deb
        continue-on-error: true

      - name: Create deb package
        run: cargo deb

      - name: "Move to outputs/ folder"
        run: |
          mkdir outputs
          cp target/release/plz outputs/plz-linux-x86_64
          cp target/debian/*.deb outputs/plz-linux-x86_64.deb

      - name: Upload to temporary storage
        uses: actions/upload-artifact@v4
        with:
          name: output-artifact
          path: outputs

  linux-musl:
    name: Musl build for Linux
    runs-on: ubuntu-latest
    needs: [version_bump]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: pkg-version

      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust musl toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true
          profile: minimal

      - name: Install gcc-musl compiler
        shell: bash
        run: |
          sudo apt-get install musl-tools
          musl-gcc --version || true

      - name: Build
        run: cargo build --release --target=x86_64-unknown-linux-musl

      - name: "Move to outputs/ folder"
        run: |
          mkdir outputs
          cp target/x86_64-unknown-linux-musl/release/plz outputs/plz-linux-musl-x86_64

      - name: Upload to temporary storage
        uses: actions/upload-artifact@v4
        with:
          name: output-artifact
          path: outputs

  macos:
    name: Build for Mac
    runs-on: macos-11
    needs: [version_bump]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: pkg-version

      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install ARM target
        run: rustup update && rustup target add aarch64-apple-darwin

      - name: ARM Build
        run: cargo build --release --target=aarch64-apple-darwin

      - name: Build
        run: cargo build --release

      - name: "Move to outputs/ folder"
        run: |
          mkdir outputs
          cp target/aarch64-apple-darwin/release/plz outputs/plz-darwin-aarch64
          cp target/release/plz outputs/plz-darwin-x86_64

      - name: Upload to temporary storage
        uses: actions/upload-artifact@v4
        with:
          name: output-artifact
          path: outputs

  release:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [create_release, windows, linux, linux-musl, macos]

    steps:
      - name: Download from temporary storage
        uses: actions/download-artifact@master
        with:
          name: output-artifact
          path: outputs

      - name: Upload binaries to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./outputs/*
          asset_name: ${{ github.ref }}-${{ matrix.os }}
          asset_content_type: application/octet-stream
